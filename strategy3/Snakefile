# This module is strategy3/, which is almost the same as strategy2/ but work with BAM file. Also, it explicitely output a footprint file (in BED format)

# This module implements the strategy2 for footprint annotation task.
# Recall that footprint annotation takes a list of variants and predicts whether
# it locates in footprint regions and whether it alters binding affinity

# In strategy3, we takes an experiment and learns a CENTIPEDE model for each
# motif-experiment pair. Motifs are taken from recalibrated one in the paper
# Which genetic variants in DNase-seq footprints are more likely to alter binding?


def all_files(config, pattern):
    motif_dir = list(config['motifs'])[0]
    samples = list(config['experiments'])
    win_size = config['centipede']['window_size']
    genome = list(config['genome_assembly'])[0]
    out = []
    for sample in samples:
        out.append(pattern.format(motif_dir = motif_dir, sample = sample, win_size = win_size, genome = genome))
    print(out)
    return out

rule all:
    input:
        # 'summary/recalMotifs/mytest__genome_hg38__window.200.report.html'
        all_files(config, 'output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.final.bed.gz'),
        all_files(config, 'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.report.html')

rule align_bam_sort:
    input:
        lambda wildcards: config['experiments'][wildcards.sample]['bam']
    output:
        'data/align/{sample}.sorted.bam'
    threads: config['alignment_params']['ncpus']
    shell:
        'samtools sort -@ {threads} -m 4G -o {output[0]} {input[0]}'

rule align_bam_index:
    input:
        'data/align/{sample}.sorted.bam'
    output:
        'data/align/{sample}.sorted.bam.bai'
    shell:
        'samtools index {input[0]}'

rule remove_duplicated_reads:
    input:
        'data/align/{sample}.sorted.bam'
    output:
        'data/align/{sample}.cleaned_bam'
    params:
        config['alignment_params']['clean_cmd']
    shell:
        'python scripts/do_remove_dup_reads.py \
        --i {input[0]} \
        --o {output[0]} \
        --cmd "{params[0]}"'

rule align_cleaned_bam_sort_index:
    input:
        'data/align/{sample}.cleaned_bam'
    output:
        'data/align/{sample}.cleaned_sorted.bam',
        'data/align/{sample}.cleaned_sorted.bam.bai'
    threads: config['alignment_params']['ncpus']
    shell:
        '''
        samtools sort -@ {threads} -m 4G -o {output[0]} {input[0]}
        samtools index {output[0]}
        '''

rule scan_motif_score_in_genome_prepare:
    params:
        motif_dir = lambda wildcards: config['motifs'][wildcards.motif_dir]
    output:
        'data/motif_in_meme/{motif_dir}/{motif_name}.meme'
    shell:
        'python scripts/pwm2meme.py \
        --motif_dir_in_pwm {params.motif_dir} \
        --motif_name_in_pwm {wildcards.motif_name} \
        --output_in_meme {output[0]}'

rule genome_upper:
    input:
        lambda wildcards: config['genome_assembly'][wildcards.genome]['fasta_upper']
    output:
        temp('data/genome/{genome}/upper.fa')
    shell:
        "cat {input[0]} | tr '[:lower:]' '[:upper:]' > {output[0]}"

rule scan_motif_score_in_genome:
    input:
        motif_in_meme = 'data/motif_in_meme/{motif_dir}/{motif_name}.meme'
    params:
        genome = 'data/genome/{genome}/upper.fa',
        threshold = config['active_motifs']['fimo_threshold']
    output:
        temp('data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region.bed')
    shell:
        'fimo \
        --skip-matched-sequence \
        --text \
        --thresh {params.threshold} \
        {input.motif_in_meme} \
        {params.genome} > \
        {output[0]}'

rule scan_motif_score_in_genome_gzip:
    input:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region.bed'
    output:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region.bed.gz'
    shell:
        '''cat {input[0]} | tail -n +2 | awk '{{print $2"\\t"$3-1"\\t"$4"\\t"$5"\\t"$6"\\t"$7"\\t"$1}}' | gzip > {output[0]}'''

rule scan_post_filtering:
    input:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region.bed.gz'
    output:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region_prior0.1.bed.gz'
    params:
        motif_dir = lambda wildcards: config['motifs'][wildcards.motif_dir]
    shell:
        'python scripts/thresholding_by_motif_prior.py \
        --input {input[0]} \
        --motif_dir {params.motif_dir} \
        --motif_name {wildcards.motif_name} \
        --output {output[0]}'


rule scan_motif_score_in_genome_extend:
    input:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}.active_region_prior0.1.bed.gz'
    params:
        window_size = lambda wildcards: int(int(wildcards.win_size) / 2),
        genome_size = lambda wildcards: config['genome_assembly'][wildcards.genome]['size']
    output:
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}__window.{win_size}.active_region.gz'
    shell:
        'bedtools slop -i <(zcat {input[0]}) -g {params.genome_size} -b {params.window_size} | gzip > {output[0]}'

rule pile_prepare:
    input:
        'data/align/{sample}.cleaned_sorted.bam',
        'data/align/{sample}.cleaned_sorted.bam.bai',
        'data/scan/{motif_dir}/{motif_name}__genome_{genome}__window.{win_size}.active_region.gz'
    output:
        temp('data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.extracted_for_pile.bam')
    shell:
        'bedtools intersect -a {input[0]} -b <(zcat {input[2]}) -wa > {output[0]}'

rule pile_do_pile:
    input:
        'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.extracted_for_pile.bam',
    params:
        lambda wildcards: config['genome_assembly'][wildcards.genome]['size']
    output:
        'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.5_prime_count_forward.bed.gz',
        'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.5_prime_count_backward.bed.gz'
    shell:
        '''
        samtools view -uf 0x2 {input[0]} | \
        genomeCoverageBed -ibam - -g {params[0]} -5 -bga -strand + | \
        gzip > {output[0]}
        samtools view -uf 0x2 {input[0]} | \
        genomeCoverageBed -ibam - -g {params[0]} -5 -bga -strand - | \
        gzip > {output[1]}
        '''

rule pile_postprocess_extract:
    input:
        extended_region = 'data/scan/{motif_dir}/{motif_name}__genome_{genome}__window.{win_size}.active_region.gz',
        score = 'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.5_prime_count_{direction}.bed.gz'
    output:
        temp('data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.active_5_prime_count_{direction}.bed.gz')
    shell:
        'bedtools intersect -a {input.score} -b <(zcat {input.extended_region}) -wb | gzip > {output[0]}'

rule pile_postprocess_formatting:
    input:
        'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.active_5_prime_count_{direction}.bed.gz'
    output:
        'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.active_5_prime_count_{direction}.formatted.bed.gz'
    shell:
        'python scripts/prepare_pile_in_region.py --pilein {input[0]} --output {output[0]}'

rule train_centipede:
    input:
        active_region = 'data/scan/{motif_dir}/{motif_name}__genome_{genome}__window.{win_size}.active_region.gz',
        five_prime_count_f = 'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.active_5_prime_count_forward.formatted.bed.gz',
        five_prime_count_b = 'data/pile/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.active_5_prime_count_backward.formatted.bed.gz'
    params:
        window_size = lambda wildcards: int(int(wildcards.win_size) / 2),
        centipede = config['centipede']['script']
    output:
        'model/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.rds',
        'footprint/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.bed.gz',
        'logs/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.train.log',
        'plots/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}_footprint.png',
        'plots/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}_cutsite.png'
    shell:
        'Rscript scripts/train_centipede.R \
        --active_region {input.active_region} \
        --five_prime_count_forward {input.five_prime_count_f} \
        --five_prime_count_backward {input.five_prime_count_b} \
        --centipede_path {params.centipede} \
        --signal {output[1]} \
        --extend_win {params.window_size} \
        --plot_prefix plots/{wildcards.motif_dir}/{wildcards.motif_name}__{wildcards.sample}__window.{wildcards.win_size} \
        --output {output[0]} > \
        {output[2]}'

# adopted from strategy2/compare/
# combining goodness of fit from all motifs
# generating HTML report (footprint figures)
rule extract_good_of_fit:
    input:
        'logs/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.train.log'
    output:
        temp('temp/{motif_dir}/{motif_name}__{sample}__genome_{genome}__window.{win_size}.train.fit')
    shell:
        '''
        cat {input[0]} | grep '#' | tr -d '#' | awk '{{print $3, $6}}' > {output[0]}
        '''

import glob
import ntpath
import re

def get_motif_files(motifs):
    out = {}
    for name in motifs.keys():
        out[name] = {}
        files = glob.glob('{name}/*.pwm'.format(name = motifs[name]))
        for f in files:
            fname = ntpath.basename(f)
            out[name][fname] = f
    return out

def get_motif_list(config):
    motif_dic = get_motif_files(config['motifs'])
    motifs = ','.join(list(motif_dic.keys()))
    if config['debug'] == True and 'test_motifs' in list(config.keys()):
        motifs = config['test_motifs']
    return motifs

def get_all_file(config, pattern):
    string = []
    motifs = get_motif_list(config)
    motifs = motifs.split(',')
    for i in motifs:
        string.append(pattern.format(motif = i, motif_name = i))
    return string

rule summary_rmd:
    input:
        fit = get_all_file(config, 'temp/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}.train.fit'),
        plot1 = get_all_file(config, 'plots/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}_footprint.png'),
        plot2 = get_all_file(config, 'plots/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}_cutsite.png')
    output:
        'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.report.Rmd'
    params:
        fit = ','.join(get_all_file(config, 'temp/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}.train.fit')),
        plot1 = ','.join(get_all_file(config, 'plots/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}_footprint.png')),
        plot2 = ','.join(get_all_file(config, 'plots/{{motif_dir}}/{motif_name}__{{sample}}__genome_{{genome}}__window.{{win_size}}_cutsite.png')),
        out = lambda wildcards: 'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.summary.txt.gz'.format(motif_dir = wildcards.motif_dir, sample = wildcards.sample, genome = wildcards.genome, win_size = wildcards.win_size),
        motif = get_motif_list(config)
    run:
        rmd = '''---
title: "Summary of training: Motif = {motif_dir}; Sample = {sample}; GenomeAssembly = {genome}; WindowSize = {win_size}"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
        toc_float: true
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

<style>
  .col2 {{
    columns: 2 200px;         /* number of columns and width in pixels*/
    -webkit-columns: 2 200px; /* chrome, safari */
    -moz-columns: 2 200px;    /* firefox */
  }}
  .col3 {{
    columns: 3 100px;
    -webkit-columns: 3 100px;
    -moz-columns: 3 100px;
  }}
</style>

# Load data

```{{r}}
library(stringr)
df <- c()
fits <- strsplit('{fit}', ',')[[1]]
cuts <- strsplit('{cut}', ',')[[1]]
foots <- strsplit('{foot}', ',')[[1]]
motifs <- strsplit('{motif}', ',')[[1]]
plot.cut <- list()
plot.foot <- list()
for(t in 1 : length(txts)) {{
    f <- fits[t]
    plot.cut[[motifs[t]]] <- paste0('../', cuts[t])
    plot.foot[[motifs[t]]] <- paste0('../', foots[t])
    f <- paste0('../', f)
    g <- read.table(f, sep = ' ', header = F)
    e <- g
    e <- as.data.frame(e)
    df <- rbind(df, e)
    rownames(df) <- NULL
}}
df <- as.data.frame(df)
colnames(df) <- c('intersect', 'union', 'first', 'second', 'motif', 'p-val', 'rho')
gz1 <- gzfile('{out}', 'w')
write.table(df, gz1, quote = F, sep = '\\t', row.names = F)
close(gz1)
# write.table(file = , data = df, quote = F, sep = '\\t', row.names = F)
```

# Consistency

```{{r, result='asis'}}
library(pander)
pander(df)
```

# Cutsite and footprint

<div class="col2">
```{{r, echo=FALSE, warning=FALSE}}
library(bsselectR)
bsselect(plot.cut, type = "img", selected = names(plot.cut)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 3,
        frame_height = 300, frame_width = 300)
bsselect(plot.foot, type = "img", selected = names(plot.foot)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 3,
        frame_height = 300, frame_width = 300)
```
</div>

'''.format(title = wildcards.title,
            fit = params.fit,
            cut = params.plot2,
            foot = params.plot1,
            motif = params.motif,
            out = params.out
            )
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule summary_html:
    input:
        'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.report.Rmd'
    output:
        'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.report.html',
        'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.summary.txt.gz'
    shell:
        '''Rscript -e "rmarkdown::render('{input[0]}')"'''
# summary END

# adopted from strategy2/combine_result/
# generating BED file

rule extract_significant_motifs:
    input:
        'summary/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.summary.txt.gz'
    output:
        temp('output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.significant_motifs')
    run:
        def get_input(config, experiment):
            import pandas as pd
            out = []
            df = pd.read_table(config['experiments'][experiment]['motifs'], compression = 'gzip', header = 0)
            motifs = df[df['p-val'] > float(config['active_motifs'])]['output_threshold']
            pattern = 'footprint/{{motif_dir}}/{motif_name}__{sample}__genome_{{genome}}__window.{{win_size}}.bed.gz'
            for m in motifs:
                out.append(pattern.format(motif_name = m, sample = experiment))
            return out
        footprints = get_input(config, wildcards.sample)
        o = open(output[0], 'w')
        o.write(' '.footprints)
        o.close

rule combine_prepare:
    input:
        'output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.significant_motifs'
    output:
        temp('temp/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.prepare.bed.gz')
    shell:
        '''
        TEMP=$(cat {input[0]})
        bash remove_header_and_combine.sh {output[0]} $TEMP
        '''

rule combine:
    input:
        footprints = 'temp/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.prepare.bed.gz'  # lambda wildcards: get_input(config, wildcards.experiment)
    output:
        bed = temp('output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.combined.bed.gz')
    shell:
        '''
        sortBed -i <(zcat {input.footprints} | awk '{{$2=sprintf("%d",$2)}}7'|awk -v OFS='\\t' '{{$3=sprintf("%d",$3)}}7') | gzip > {output.bed}
        '''

rule postprocess:
    input:
        'output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.combined.bed.gz'
    output:
        'output/{motif_dir}/{sample}__genome_{genome}__window.{win_size}.final.bed.gz'
    shell:
        '''
        zcat {input[0]} | awk -v OFS='\\t' '{{print $1,$2,$3,$5,"1000",$4,$2,$3,"0,0,0","0","-","-",$6,$6}}' | gzip > {output[0]}
        '''
# output END

