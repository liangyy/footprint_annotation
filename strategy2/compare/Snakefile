# this submodule tends to compare strategy2 training result with the result
# reported by
# "Which Genetics Variants in DNase-Seq Footprints Are More Likely to Alter Binding?"

def get_input(config, title):
    string = []
    motifs = config[title]['motif_list'].split(',')
    for i in motifs:
        string.append('temp/{title}__{motif}.txt'.format(motif = i, title = title))
        string.append('temp/{title}__{motif}.second_fitness'.format(motif = i, title = title))
        string.append(config[title]['plot_cutsite'].format(motif = i))
        string.append(config[title]['plot_footprint'].format(motif = i))
        # print(config[title]['plot_cutsite'])
    return string


rule all:
    input:
        'summary/{title}.html'.format(title = list(config.keys())[0])

rule prepare_first:
    input:
        lambda wildcards: config[wildcards.title]['first']
    output:
        temp('temp/{title}__{motif}.bed.gz')
    shell:
        'zcat {input[0]} | grep {wildcards.motif} | grep 0,0,0 > {output[0]}'

rule compare:
    input:
        first = 'temp/{title}__{motif}.bed.gz',
        second = lambda wildcards: config[wildcards.title]['second'].format(motif = wildcards.motif)
    output:
        temp('temp/{title}__{motif}.txt')
    shell:
        '''
        Rscript scripts/compare.R \
        --first {input.first} \
        --second {input.second} \
        --out {output[0]} \
        --name {wildcards.motif}
        '''

rule extract_fitness:
    input:
        lambda wildcards: config[wildcards.title]['second_fitness'].format(motif = wildcards.motif)
    output:
        temp('temp/{title}__{motif}.second_fitness')
    shell:
        '''
        cat {input[0]} | grep '#' | tr -d '#' | awk '{{print $3, $6}}' > {output[0]}
        '''

def get_all_txt_in_str(config, title):
    string = []
    motifs = config[title]['motif_list'].split(',')
    for i in motifs:
        string.append('temp/{title}__{motif}.txt'.format(motif = i, title = title))
    return ','.join(string)

def get_all_txt_in_str_fitness(config, title):
    string = []
    motifs = config[title]['motif_list'].split(',')
    for i in motifs:
        string.append('temp/{title}__{motif}.second_fitness'.format(motif = i, title = title))
    return ','.join(string)

def get_all_plots_cutsite(config, title):
    string = []
    motifs = config[title]['motif_list'].split(',')
    for i in motifs:
        string.append(config[title]['plot_cutsite'].format(motif = i))
        # print(config[title]['plot_cutsite'])
    return ','.join(string)

def get_all_plots_footprint(config, title):
    string = []
    motifs = config[title]['motif_list'].split(',')
    for i in motifs:
        string.append(config[title]['plot_footprint'].format(motif = i))
        # print(config[title]['plot_cutsite'])
    return ','.join(string)

rule summary_rmd:
    input:
        lambda wildcards: get_input(config, wildcards.title)
    params:
        txt = lambda wildcards: get_all_txt_in_str(config, wildcards.title),
        fitness = lambda wildcards: get_all_txt_in_str_fitness(config, wildcards.title),
        cutsite = lambda wildcards: get_all_plots_cutsite(config, wildcards.title),
        footprint = lambda wildcards: get_all_plots_footprint(config, wildcards.title),
        motif = lambda wildcards: config[wildcards.title]['motif_list'],
        out = lambda wildcards: '../summary/{title}.summary.txt.gz'.format(title = wildcards.title)
    output:
        temp('summary/{title}.Rmd'),
        # 'summary/{title}.summary.txt.gz'
    run:
        rmd = '''---
title: "Summary of comparison in {title}"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
        toc_float: true
author: Yanyu Liang
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

<style>
  .col2 {{
    columns: 2 200px;         /* number of columns and width in pixels*/
    -webkit-columns: 2 200px; /* chrome, safari */
    -moz-columns: 2 200px;    /* firefox */
  }}
  .col3 {{
    columns: 3 100px;
    -webkit-columns: 3 100px;
    -moz-columns: 3 100px;
  }}
</style>

# Load data

```{{r}}
library(stringr)
df <- c()
txts <- strsplit('{str}', ',')[[1]]
fits <- strsplit('{fit}', ',')[[1]]
cuts <- strsplit('{cut}', ',')[[1]]
foots <- strsplit('{foot}', ',')[[1]]
motifs <- strsplit('{motif}', ',')[[1]]
plot.cut <- list()
plot.foot <- list()
for(t in 1 : length(txts)) {{
    f <- fits[t]
    plot.cut[[motifs[t]]] <- paste0('../', cuts[t])
    plot.foot[[motifs[t]]] <- paste0('../', foots[t])
    t <- txts[t]
    t <- paste0('../', t)
    f <- paste0('../', f)
    e <- read.table(t, sep = '\\t', header = F)
    g <- read.table(f, sep = ' ', header = F)
    e <- c(e, g)
    e <- as.data.frame(e)
    df <- rbind(df, e)
    rownames(df) <- NULL
}}
df <- as.data.frame(df)
colnames(df) <- c('intersect', 'union', 'first', 'second', 'motif', 'p-val', 'rho')
gz1 <- gzfile('{out}', 'w')
write.table(df, gz1, quote = F, sep = '\\t', row.names = F)
close(gz1)
# write.table(file = , data = df, quote = F, sep = '\\t', row.names = F)
```

# Consistency

```{{r, result='asis'}}
library(pander)
pander(df)
```

# Cutsite and footprint

<div class="col2">
```{{r, echo=FALSE, warning=FALSE}}
library(bsselectR)
bsselect(plot.cut, type = "img", selected = names(plot.cut)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 3,
        frame_height = 300, frame_width = 300)
bsselect(plot.foot, type = "img", selected = names(plot.foot)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 3,
        frame_height = 300, frame_width = 300)
```
</div>

'''.format(title = wildcards.title,
            str = params.txt,
            fit = params.fitness,
            cut = params.cutsite,
            foot = params.footprint,
            motif = params.motif,
            out = params.out
            )
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule summary_html:
    input:
        r = lambda wildcards: get_input(config, wildcards.title),
        rmd = 'summary/{title}.Rmd'
    output:
        'summary/{title}.html',
        'summary/{title}.summary.txt.gz'
    shell:
        '''Rscript -e "rmarkdown::render('{input.rmd}')"'''
